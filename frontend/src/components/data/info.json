{
    "add": "Binary operator addition\nParameters: value to be added",
    "select_dtypes": "Return a subset of the DataFrame’s columns based on the column dtypes.\nParameters: include, exclude",
    "convert_dtypes": "Convert columns to the best possible dtypes.",
    "insert": "Insert column into DataFrame at specified location.\nParameters: loc: insertion index, column: label of the inserted column\n value, allow_duplicates",
    "pop": "Return item and drop from frame.\nParameters: item: label of the column to be popped.",
    "tail": "Return the last n rows.\nParameters: n.",
    "head": "Return the first n rows.\nParameters: n.",
    "get": "Get item from object for given key.\nParameters: key",
    "query": "Query the columns of a DataFrame with a boolean expression.\nParameters: query",
    "where": "Replace values where the condition is False.\nParameters: condition",
    "mask": "Replace values where the condition is True.\nParameters: condition",
    "sub": "Binary operator subtraction\nParameters: value to be subtracted",
    "mul": "Binary operator multiplication\nParameters: value/series to be multiplied",
    "div": "Binary operator floating division\nParameters: value/series to be the divider",
    "truediv": "Binary operator floating division\nParameters: value/series to be the divider",
    "floordiv": "Binary operator integer division\nParameters: value/series to be the divider",
    "mod": "Binary operator module\nParameters: value/series to be the divider",
    "pow": "Binary operator power\nParameters: value/series to be the power",
    "dot": "Compute the matrix multiplication between the DataFrame and other\nParameters: other: other object to compute the matrix product with",
    "radd": "Binary operator addition\nParameters: value to be added",
    "rsub": "Binary operator subtraction\nParameters: value to be subtracted",
    "rmul": "Binary operator multiplication\nParameters: value/series to be multiplied",
    "rdiv": "Binary operator floating division\nParameters: value/series to be the divider",
    "rtruediv": "Binary operator floating division\nParameters: value/series to be the divider",
    "rfloordiv": "Binary operator integer division\nParameters: value/series to be the divider",
    "rmod": "Binary operator module\nParameters: value/series to be the divider",
    "rpow": "Binary operator power\nParameters: value/series to be the power",
    "lt": "Get Less than of dataframe and other, element-wise:\nParameters: value/series to confront",
    "gt": "Get Greater than of dataframe and other, element-wise:\nParameters: value/series to confront",
    "ge": "Get Greater than or Equal of dataframe and other, element-wise:\nParameters: value/series to confront",
    "le": "Get Less than or Equal of dataframe and other, element-wise:\nParameters: value/series to confront",
    "ne": "Get Not Equal than of dataframe and other, element-wise:\nParameters: value/series to confront",
    "eq": "Get Equal than of dataframe and other, element-wise:\nParameters: value/series to confront",
    "combine": "Perform column-wise combine with another DataFrame\nParameters: other: Dataframe, func: function used to merge the two dataframes column by columns",
    "combine_first": "Combine two DataFrame objects by filling null values in one DataFrame with non-null values from other DataFrame\nParameters: other: DataFrame",
    "apply": "Apply a function along an axis of the DataFrame\nParameters: func: function, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "map": "Apply a function to a Dataframe elementwise.\nParameters: func: Python function",
    "pipe": "Apply chainable functions that expect Series or DataFrames.\nParameters: func: function to apply to the Series/DataFrame.",
    "transform": "Apply a function to a DataFrame\nParameters: func: function to use for transforming the data, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "abs": "Return a Series/DataFrame with absolute numeric value of each element.",
    "clip": "Trim values at input threshold(s).\nParameters: lower: minimum threshold value, upper: maximum threshold value\naxis: {0 or 'index', 1 or 'columns'}, default 0",
    "cummax": "Return cumulative maximum over a DataFrame or Series axis.\nParameters: axis: {0 or 'index', 1 or 'columns'}, default 0, skipna: boolean, exclude NA/null values, default true",
    "cummin": "Return cumulative minimum over a DataFrame or Series axis.\nParameters: axis: {0 or 'index', 1 or 'columns'}, default 0, skipna: boolean, exclude NA/null values, default true",
    "cumprod": "Return cumulative product over a DataFrame or Series axis.\nParameters: axis: {0 or 'index', 1 or 'columns'}, default 0, skipna: boolean, exclude NA/null values, default true",
    "cumsum": "Return cumulative sum over a DataFrame or Series axis.\nParameters: axis: {0 or 'index', 1 or 'columns'}, default 0, skipna: boolean, exclude NA/null values, default true",
    "diff": "Calculates the difference of a DataFrame element compared with another element in the DataFrame.\nParameters: periods: periods to shift for calculating difference, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "pct_change": "Fractional change between the current and a prior element.\nParameters: periods: periods to shift for forming percent change",
    "round": "Round a DataFrame to a variable number of decimal places.\nParameters: decimals: number of decimal places to round each column to",
    "at_time": "Select values at particular time of day.\nParameters: time: the values to select, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "between_time": "Select values between particular times of the day.\nParameters: start_time: initial time as a time filter limit, end_time: end time as a time filter limit,\naxis: {0 or 'index', 1 or 'columns'}, default 0",
    "drop": "Drop specified labels from rows or columns.\nParameters: labels: index or column labels to drop, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "drop_duplicates": "Return DataFrame with duplicate rows removed.\nParameters: keep{'first', 'last', False}, default 'first'",
    "filter": "Subset the dataframe rows or columns according to the specified index labels.\nParameters: items: keep labels from axis which are in items, like: keep labels from axis for which “like in label == True”,\n regex: keep labels from axis for which re.search(regex, label) == True, axis: {0 or 'index', 1 or 'columns', None}, default None",
    "first": "Select initial periods of time series data based on a date offset.\nParameters: offset: the offset length of the data that will be selected",
    "last": "Select final periods of time series data based on a date offset.\nParameters: offset: the offset length of the data that will be selected",
    "reindex": "Conform DataFrame to new index with optional filling logic.\nParameters: labels: new labels/index to conform the axis specified by 'axis' to, columns: new labels for the columns, index: new labels for the index,\n axis: axis to target. Can be either the axis name ('index', 'columns') or number (0, 1)",
    "reindex_like": "Return an object with matching indices as other object.\nParameters: other: object whose row and column indices are used to define the new indices of this object",
    "rename": "Rename columns or index labels.\nParameters: index: dict-like or function transformations to apply to the index, columns: dict-like or function transformations to apply to the index", 
    "rename_axis": "Set the name of the axis for the index or columns.\nParameters: index: dict-like or function transformations to apply to the index, columns: dict-like or function transformations to apply to the index",
    "reset_index": "Reset the index, or a level of it.",
    "sample": "Return a random sample of items from an axis of object.\nParameters: n: number of items to return",
    "set-axis": "Assign desired index to given axis.\nParameters: labels: the values for the new index, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "set_index": "Set the DataFrame index using existing columns.\nParameters: keys: single column key, a single array of the same length as the calling DataFrame, or a list containing an arbitrary combination of column keys and arrays",
    "take": "Return the elements in the given positional indices along an axis.\nParameters: indices: array of ints indicating which positions to take, axis: {0 or 'index', 1 or 'columns', None}, default 0",
    "truncate": "Truncate a Series or DataFrame before and after some index value.\nParameters: before: truncate all rows before this index value, after: truncate all rows after this index value, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "dropna": "Remove missing values.\nParameters: axis: {0 or 'index', 1 or 'columns'}, default 0",
    "fillna": "Fill NA/NaN values using the specified method.\nParameters: value: value used to fill holes",
    "interpolate": "Fill NaN values using an interpolation method.\nParameters: method: https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.interpolate.html (list of methods)",
    "isna": "Detect missing values.",
    "isnull": "Detect missing values.",
    "notna": "Detect existing (non-missing) values.",
    "notnull": "Detect existing (non-missing) values.",
    "replace": "Replace values given in to_replace with value.\nParameters: to_replace: str, regex, list, dict, Series, int, float that match values in the DataFrame, value: value to replace any values matching to_replace with",
    "sort_values": "Sort by the values along either axis.\nParameters: by: name or list of names to sort by, ascending: boolean to sort ascending or descending, default True ,axis: {0 or 'index', 1 or 'columns'}, default 0",
    "sort_index": "Sort object by labels (along an axis).\nParameters: axis: {0 or 'index', 1 or 'columns'}, default 0",
    "nlargest": "Return the first n rows ordered by columns in descending order.\nParameters: n: number of rows to return, columns: column label(s) to order by",
    "nsmallest": "Return the first n rows ordered by columns in ascending    order.\nParameters: n: number of rows to return, columns: column label(s) to order by",
    "assign ": "Assign new columns to a DataFrame\na",
    "join": "Join columns of another DataFrame.\nParameters: other: DataFrame to join, how: {'left', 'right', 'outer', 'inner', 'cross'}, default 'left'",
    "merge": "Merge DataFrame or named Series objects with a database-style join.\nParameters: right: object to merge with, how: {'left', 'right', 'outer', 'inner', 'cross'}, default 'inner'",
    "asfreq": "Convert time series to specified frequency.\nParameters: freq: frequency DateOffset or string, method: {'backfill', 'pad'}, default None",
    "shift": "Shift index by desired number of periods with an optional time freq.\nParameters: periods: number of periods to shift, freq: offset, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "to_timestamp": "Cast to DatetimeIndex of timestamps, at beginning of period.\nParameters: freq: desired frequency, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "tz_convert": "Convert tz-aware axis to target time zone.\nParameters: tz: target timezone, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "tz_localize": "Localize tz-naive index of a Series or DataFrame to target time zone.\nParameters: tz: timezone to localize, axis: {0 or 'index', 1 or 'columns'}, default 0",
    "normalize": "Standardization of the selected column\nParameters: column name"
}

